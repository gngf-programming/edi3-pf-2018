-- Copyright (c) 2018 Facundo Campos <facundo.nicolas.campos@gmail.com>. All rights reserved. 
-- File: query.sql. This file is part of COMPSET.
-- Released under the GPL3 license
-- https://opensource.org/licenses/GPL-3.0

-- TABLES AND COLLATION
DROP COLLATION IF EXISTS public.utf8_unicode CASCADE;
CREATE COLLATION public.utf8_unicode FROM pg_catalog."und-x-icu";
ALTER COLLATION public.utf8_unicode OWNER TO postgres;
drop sequence IF EXISTS users_id_seq CASCADE;
create sequence users_id_seq;
drop table IF EXISTS users CASCADE;
create table users(id_users BIGINT NOT NULL UNIQUE DEFAULT nextval('users_id_seq'), identifier VARCHAR(256) COLLATE utf8_unicode, password_hash VARCHAR(256) COLLATE utf8_unicode );
drop sequence IF EXISTS roles_id_seq CASCADE;
create sequence roles_id_seq;
drop table IF EXISTS roles CASCADE;
create table roles ( id_roles BIGINT NOT NULL UNIQUE DEFAULT nextval('roles_id_seq'), name VARCHAR(256) COLLATE utf8_unicode, description VARCHAR(256) COLLATE utf8_unicode ); 
drop sequence IF EXISTS actions_id_seq CASCADE;
create sequence actions_id_seq;
drop table IF EXISTS actions CASCADE; create table actions ( id_actions BIGINT NOT NULL UNIQUE DEFAULT nextval('actions_id_seq'), name VARCHAR(256) COLLATE utf8_unicode );
drop sequence IF EXISTS users_has_roles_id_seq CASCADE;
create sequence users_has_roles_id_seq;
drop table IF EXISTS users_has_roles CASCADE;
create table users_has_roles(id_users_has_roles BIGINT NOT NULL UNIQUE DEFAULT nextval('users_has_roles_id_seq'), users_id BIGINT NOT NULL, roles_id BIGINT NOT NULL);
alter table users_has_roles add constraint fk_uhr_users_id foreign key (users_id) references users(id_users) on delete CASCADE on update NO ACTION, add constraint fk_uhr_roles_id foreign key (roles_id) references roles(id_roles) on delete CASCADE on update NO ACTION;
drop sequence IF EXISTS roles_has_actions_id_seq CASCADE;
create sequence roles_has_actions_id_seq; 
drop table IF EXISTS roles_has_actions CASCADE; create table roles_has_actions (id_roles_has_actions BIGINT NOT NULL UNIQUE DEFAULT nextval('roles_has_actions_id_seq'), actions_id BIGINT NOT NULL, roles_id BIGINT NOT NULL);
alter table roles_has_actions add constraint fk_rha_actions_id foreign key (actions_id) references actions(id_actions) on delete CASCADE on update NO ACTION, add constraint fk_rha_roles_id foreign key (roles_id) references roles(id_roles) on delete CASCADE on update NO ACTION;
-- STORED PROCEDURES
DROP FUNCTION IF EXISTS c_user;
CREATE FUNCTION c_user( IN _identifier VARCHAR(256), IN _password_hash VARCHAR(256) ) RETURNS void AS $$ BEGIN insert into users(identifier, password_hash) values (_identifier,_password_hash); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS c_rol;
CREATE FUNCTION c_rol( IN _name VARCHAR(256), IN _description VARCHAR(256) ) RETURNS void AS $$ BEGIN insert into roles(name, description) values (_name,_description); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS c_action;
CREATE FUNCTION c_action( IN _name VARCHAR(256) ) RETURNS void AS $$ BEGIN insert into actions(name) values (_name); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS c_b_uhr;
CREATE FUNCTION c_b_uhr( IN _users_id BIGINT, IN _roles_id BIGINT ) RETURNS void AS $$ BEGIN insert into users_has_roles(users_id, roles_id) values (_users_id, _roles_id); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS c_b_rha;
CREATE FUNCTION c_b_rha(IN _roles_id BIGINT, IN _actions_id BIGINT) RETURNS void AS $$ BEGIN insert into roles_has_actions(roles_id, actions_id) values (_roles_id, _actions_id ); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_user_by_id;
CREATE FUNCTION d_user_by_id(IN _id_users BIGINT) RETURNS void AS $$ BEGIN delete from users where id_users = _id_users; perform d_b_uhr_by_user_id( _id_users ); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_rol_by_id;
CREATE FUNCTION d_rol_by_id ( IN _id_roles BIGINT ) RETURNS void AS $$ BEGIN delete from roles where id_roles = _id_roles; perform d_b_uhr_by_roles_id( _id_roles ); perform d_b_rha_by_roles_id( _id_roles ); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_action_by_id;
CREATE FUNCTION d_action_by_id( IN _id_actions BIGINT ) RETURNS void AS $$ BEGIN delete from actions where id_actions = _id_actions; perform d_b_rha_by_actions_id(_id_actions); END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_b_uhr_by_id;
CREATE FUNCTION d_b_uhr_by_id(IN _id_users_has_roles BIGINT) RETURNS void AS $$ BEGIN delete from users_has_roles where id_users_has_roles = _id_users_has_roles; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_b_uhr_by_user_id;
CREATE FUNCTION d_b_uhr_by_user_id( IN _users_id BIGINT ) RETURNS void AS $$ BEGIN delete from users_has_roles where users_id = _users_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_b_uhr_by_roles_id;
CREATE FUNCTION d_b_uhr_by_roles_id ( IN _roles_id BIGINT ) RETURNS void AS $$ BEGIN delete from users_has_roles where roles_id = _roles_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_b_rha_by_id;
CREATE FUNCTION d_b_rha_by_id( IN _id_roles_has_actions BIGINT ) RETURNS void AS $$ BEGIN delete from roles_has_actions where id_roles_has_actions = _id_roles_has_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_b_rha_by_roles_id;
CREATE FUNCTION d_b_rha_by_roles_id ( IN _roles_id BIGINT ) RETURNS void AS $$ BEGIN delete from roles_has_actions where roles_id = _roles_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS d_b_rha_by_actions_id;
CREATE FUNCTION d_b_rha_by_actions_id( IN _actions_id BIGINT ) RETURNS void AS $$ BEGIN delete from roles_has_actions where actions_id = _actions_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_user_by_id;
CREATE FUNCTION u_user_by_id( IN _id_users BIGINT, IN _identifier VARCHAR(256), IN _password_hash VARCHAR(256) ) RETURNS void AS $$ BEGIN update users set identifier = _identifier, password_hash = _password_hash where id_users = _id_users; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_user_identifier_by_id;
CREATE FUNCTION u_user_identifier_by_id( IN _id_users BIGINT, IN _identifier VARCHAR(256) ) RETURNS void AS $$ BEGIN update users set identifier = _identifier where id_users = _id_users; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_user_pwd_hash_by_id;
CREATE FUNCTION u_user_pwd_hash_by_id( IN _id_users BIGINT, IN _password_hash VARCHAR(256) ) RETURNS void AS $$ BEGIN update users set password_hash = _password_hash where id_users = _id_users; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_user_by_identifier;
CREATE FUNCTION u_user_by_identifier( IN _identifier VARCHAR(256), IN _new_identifier VARCHAR(256), IN _password_hash VARCHAR(256) ) RETURNS void AS $$ BEGIN update users set identifier = _new_identifier, password_hash = _password_hash where identifier = _identifier; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_user_identifier_by_identifier;
CREATE FUNCTION u_user_identifier_by_identifier( IN _identifier VARCHAR(256), IN _new_identifier VARCHAR(256) ) RETURNS void AS $$ BEGIN update users set identifier = _new_identifier where identifier = _identifier; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_user_pwd_hash_by_identifier;
CREATE FUNCTION u_user_pwd_hash_by_identifier( IN _identifier VARCHAR(256), IN _password_hash VARCHAR(256) ) RETURNS void AS $$ BEGIN update users set password_hash = _password_hash where identifier = _identifier; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_rol_by_id;
CREATE FUNCTION u_rol_by_id( IN _id_roles BIGINT, IN _name VARCHAR(256), IN _description VARCHAR(256) ) RETURNS void AS $$ BEGIN update roles set name = _name, description = _description where id_roles = _id_roles; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_rol_name_by_id;
CREATE FUNCTION u_rol_name_by_id( IN _id_roles BIGINT, IN _name VARCHAR(256)) RETURNS void AS $$ BEGIN update roles set name = _name where id_roles = _id_roles; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_rol_description_by_id;
CREATE FUNCTION u_rol_description_by_id( IN _id_roles BIGINT, IN _description VARCHAR(256) ) RETURNS void AS $$ BEGIN update roles set description = _description where id_roles = _id_roles; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_rol_by_name;
CREATE FUNCTION u_rol_by_name( IN _name VARCHAR(256), IN _new_name VARCHAR(256), IN _description VARCHAR(256) ) RETURNS void AS $$ BEGIN update roles set name = _new_name, description = _description where name = _name; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_rol_name_by_name;
CREATE FUNCTION u_rol_name_by_name( IN _name VARCHAR(256), IN _new_name VARCHAR(256)) RETURNS void AS $$ BEGIN update roles set name = _new_name where name = _name; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_rol_description_by_name;
CREATE FUNCTION u_rol_description_by_name( IN _name VARCHAR(256), IN _description VARCHAR(256) ) RETURNS void AS $$ BEGIN update roles set description = _description where name = _name; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_action_by_id;
CREATE FUNCTION u_action_by_id( IN _id_actions BIGINT, IN _name VARCHAR(256)) RETURNS void AS $$ BEGIN update actions set name = _name where id_actions = _id_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_action_by_name;
CREATE FUNCTION u_action_by_name( IN _name VARCHAR(256), IN _new_name VARCHAR(256)) RETURNS void AS $$ BEGIN update actions set name = _new_name where name = _name; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_uhr_by_id;
CREATE FUNCTION u_b_uhr_by_id( IN _id_users_has_roles BIGINT, IN _users_id BIGINT, IN _roles_id BIGINT) RETURNS void AS $$ BEGIN update users_has_roles set users_id = _users_id, roles_id = _roles_id where id_actions = _id_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_uhr_user_id_by_id; 
CREATE FUNCTION u_b_uhr_user_id_by_id( IN _id_users_has_roles BIGINT, IN _users_id BIGINT) RETURNS void AS $$ BEGIN update users_has_roles set users_id = _users_id where id_actions = _id_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_uhr_rol_id_by_id;
CREATE FUNCTION u_b_uhr_rol_id_by_id( IN _id_users_has_roles BIGINT, IN _roles_id BIGINT) RETURNS void AS $$ BEGIN update users_has_roles set roles_id = _roles_id where id_actions = _id_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_uhr_user_id_by_user_id;
CREATE FUNCTION u_b_uhr_user_id_by_user_id( IN _users_id BIGINT, IN _new_user_id BIGINT) RETURNS void AS $$ BEGIN update users_has_roles set users_id = _new_user_id where users_id = _users_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_uhr_rol_id_by_rol_id;
CREATE FUNCTION u_b_uhr_rol_id_by_rol_id( IN _roles_id BIGINT, IN _new_roles_id BIGINT) RETURNS void AS $$ BEGIN update users_has_roles set roles_id = _new_roles_id where roles_id = _roles_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_rha_by_id;
CREATE FUNCTION u_b_rha_by_id( IN _id_roles_has_actions BIGINT, IN _roles_id BIGINT, IN _actions_id BIGINT	) RETURNS void AS $$ BEGIN update roles_has_actions set roles_id = _roles_id, actions = _actions_id where id_roles_has_actions = _id_roles_has_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_rha_rol_id_by_id;
CREATE FUNCTION u_b_rha_rol_id_by_id( IN _id_roles_has_actions BIGINT, IN _roles_id BIGINT) RETURNS void AS $$ BEGIN update roles_has_actions set roles_id = _roles_id where id_roles_has_actions = _id_roles_has_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_rha_action_id_by_id;
CREATE FUNCTION u_b_rha_action_id_by_id( IN _id_roles_has_actions BIGINT, IN _actions_id BIGINT) RETURNS void AS $$ BEGIN update roles_has_actions set actions_id = _actions_id where id_roles_has_actions = _id_roles_has_actions; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_rha_rol_id_by_rol_id;
CREATE FUNCTION u_b_rha_rol_id_by_rol_id( IN _roles_id BIGINT, IN _new_roles_id BIGINT) RETURNS void AS $$ BEGIN update roles_has_actions set roles_id = _new_roles_id where roles_id = _roles_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS u_b_rha_action_id_by_action_id;
CREATE FUNCTION u_b_rha_action_id_by_action_id( IN _actions_id BIGINT, IN _new_actions_id BIGINT	) RETURNS void AS $$ BEGIN update roles_has_actions set actions = _new_actions_id where actions_id = _actions_id; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS get_uhr_id_by_fks; 
CREATE FUNCTION get_uhr_id_by_fks( IN _users_id BIGINT, IN _roles_id BIGINT ) RETURNS void AS $$ BEGIN select id_users_has_roles from users_has_roles where users_id = _users_id and roles_id = _roles_id limit 1; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS get_rha_id_by_fks;
CREATE FUNCTION get_rha_id_by_fks( IN _roles_id BIGINT, IN _actions_id BIGINT ) RETURNS void AS $$ BEGIN select id_roles_has_actions from roles_has_actions where actions_id = _actions_id and roles_id = _roles_id limit 1; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS get_id_users;
CREATE FUNCTION get_id_users( IN _identifier BIGINT ) RETURNS void AS $$ BEGIN select id_users from users where identifier = _identifier limit 1; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS get_id_roles;
CREATE FUNCTION get_id_roles( IN _name BIGINT ) RETURNS void AS $$ BEGIN select id_roles from roles where name = _name limit 1; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS get_id_actions;
CREATE FUNCTION get_id_actions( IN _name BIGINT ) RETURNS void AS $$ BEGIN select id_actions from actions where name = _name limit 1; END; $$ LANGUAGE plpgsql;
DROP FUNCTION IF EXISTS get_all_common;
CREATE FUNCTION get_all_common() RETURNS void AS $$ BEGIN select users.*,roles.*,actions.* from users inner join users_has_roles on users.id_users = users_has_roles.users_id inner join roles on users_has_roles.roles_id = roles.id_roles inner join roles_has_actions on roles.id_roles = roles_has_actions.roles_id inner join actions on roles_has_actions.actions_id = actions.id_actions order by users.id_users; END; $$ LANGUAGE plpgsql;
-- DATA FOR TEST
SELECT c_user('facundo','1234'); -- IDENTIFIER , PASSWORD 
SELECT c_user('nicolas','1234');  
SELECT c_user('gabriel','1234');  
SELECT c_user('leonardo','1234');  
SELECT c_user('giuliano','1234');  
SELECT c_user('carlos','1234');  
SELECT c_user('hernan','1234');  
SELECT c_user('celeste','1234');  
SELECT c_user('laura','1234');  
SELECT c_user('sebastian','1234');  
SELECT c_rol('Admin','SIN DESCRIPCION PROPORCIONADA'); -- NAME , DESCRIPTION 
SELECT c_rol('Comprador','SIN DESCRIPCION PROPORCIONADA'); 
SELECT c_rol('Vendedor','SIN DESCRIPCION PROPORCIONADA');  
SELECT c_action('comprar'); -- NAME 
SELECT c_action('vender'); 
SELECT c_action('publicar'); 
SELECT c_action('alta usuario'); 
SELECT c_action('baja usuario'); 
SELECT c_action('alta publicacion'); 
SELECT c_action('baja publicacion'); 
SELECT c_b_uhr( ( SELECT get_id_users('gabriel') ) , ( SELECT get_id_roles('Admin') ) );  
SELECT c_b_uhr( ( SELECT get_id_users('leonardo') ) , ( SELECT get_id_roles('Vendedor') ) ); 
SELECT c_b_uhr( ( SELECT get_id_users('carlos') ) , ( SELECT get_id_roles('Comprador') ) );   
SELECT c_b_uhr( ( SELECT get_id_users('laura') ) , ( SELECT get_id_roles('Comprador') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Admin') ) , ( SELECT get_id_actions('alta usuario') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Admin') ) , ( SELECT get_id_actions('baja usuario') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Admin') ) , ( SELECT get_id_actions('alta publicacion') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Admin') ) , ( SELECT get_id_actions('baja publicacion') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Vendedor') ) , ( SELECT get_id_actions('publicar') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Vendedor') ) , ( SELECT get_id_actions('vender') ) ); 
SELECT c_b_rha( ( SELECT get_id_roles('Comprador') ) , ( SELECT get_id_actions('comprar') ) );
